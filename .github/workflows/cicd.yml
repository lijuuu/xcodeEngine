name: CI-CD Pipeline

on:
  push:
    branches:
      - deploytesting
      - main
      - testcicd
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Go environment
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24.1"

      # Step 3: Install Go dependencies
      - name: Install dependencies
        run: go mod download

      # Step 4: Run Go vet to check for code issues
      - name: Run go vet
        run: go vet ./...

      # Step 5: Build the Go binary using multi-stage Dockerfile
      - name: Build Docker Image
        run: |
          docker build -t lijuthomas/codeexecutionengine:${{ github.sha }} -t lijuthomas/codeexecutionengine:latest .

      # Step 6: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 7: Push Docker Image to Docker Hub
      - name: Push Docker Image
        run: |
          docker push lijuthomas/codeexecutionengine:${{ github.sha }}
          docker push lijuthomas/codeexecutionengine:latest

      # Step 8: Deploy to EC2
      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_SERVER_IP }}
          SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
        run: |
          echo "$SSH_KEY" > ssh_key.pem
          chmod 600 ssh_key.pem
          ssh -o StrictHostKeyChecking=no -i ssh_key.pem ubuntu@$EC2_HOST << EOF
            # Log in to Docker Hub on EC2
            echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            
            # Stop and remove any existing container
            docker stop codeexecutionengine || true
            docker rm codeexecutionengine || true

            # Pull the latest Docker image
            docker pull lijuthomas/codeexecutionengine:latest

            # Run the Docker container with required environment variables
            docker run -d --name codeexecutionengine -p 50053:50053 \
              -v /home/ubuntu/.env:/app/.env \
              lijuthomas/codeexecutionengine:latest
            sleep 10
            docker logs codeexecutionengine
          EOF

      # Step 9: Prune unused Docker images, containers, and networks
      - name: Prune unused Docker images, containers, and networks
        env:
          SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_HOST: ${{ secrets.EC2_SERVER_IP }}
        run: |
          echo "$SSH_KEY" > ssh_key.pem
          chmod 600 ssh_key.pem
          ssh -o StrictHostKeyChecking=no -i ssh_key.pem ubuntu@$EC2_HOST << EOF
            # Clean up unused Docker containers, images, and networks
            docker system prune -af --volumes
          EOF
