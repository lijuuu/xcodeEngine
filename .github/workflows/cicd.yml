name: Deploy Binary & Docker Worker

on:
  push:
    branches: [main, deploytesting]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.21"

      - name: Build Go Binary
        run: |
          GOOS=linux GOARCH=amd64 go build -o codeexecutionengine ./cmd/main.go

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker Image for Worker
        run: |
          docker build -t lijuthomas/worker:latest -f Dockerfile.worker .

      - name: Push Docker Image to Docker Hub
        run: |
          docker push lijuthomas/worker:latest

      - name: Upload binary to EC2
        env:
          SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_HOST: ${{ secrets.EC2_SERVER_IP }}
        run: |
          echo "$SSH_KEY" > ssh_key.pem
          chmod 600 ssh_key.pem
          scp -o StrictHostKeyChecking=no -i ssh_key.pem codeexecutionengine ubuntu@$EC2_HOST:/home/ubuntu/codeexecutionengine

      - name: Restart Engine Binary & Refresh Worker Containers
        env:
          SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_HOST: ${{ secrets.EC2_SERVER_IP }}
        run: |
          echo "$SSH_KEY" > ssh_key.pem
          chmod 600 ssh_key.pem

          ssh -o StrictHostKeyChecking=no -i ssh_key.pem ubuntu@$EC2_HOST << 'EOF'
            echo "Killing engine binary..."
            pkill codeexecutionengine || true

            echo "Setting engine binary executable and restarting..."
            chmod +x /home/ubuntu/codeexecutionengine
            nohup /home/ubuntu/codeexecutionengine > engine.log 2>&1 &

            echo "Stopping and removing all containers using lijuthomas/worker:latest..."
            docker ps -a --filter ancestor=lijuthomas/worker:latest --format "{{.ID}}" | xargs -r docker rm -f

            echo "Removing old worker image..."
            docker rmi -f lijuthomas/worker:latest || true

            echo "Pulling latest worker image..."
            docker pull lijuthomas/worker:latest

            echo "Starting fresh worker container..."
            docker run -d --name worker lijuthomas/worker:latest
          EOF
